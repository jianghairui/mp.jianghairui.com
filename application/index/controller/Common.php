<?php
/**
 * Created by PhpStorm.
 * User: JHR
 * Date: 2018/9/18
 * Time: 21:36
 */
namespace app\index\controller;
use think\Controller;
use think\Db;
use think\exception\HttpResponseException;
class Common extends Controller {

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->myinfo = [
            'openid' => '',
            'session_key' => ''
        ];
        $this->mp_config = [
            'app_id' => 'wx0d6f8a78265b1229',
            'secret' => 'b7cfdce371e0c100e7fc1d482933d7f5',

            'mch_id'             => '1514516351',
            'key'                => 'LDB15083727504163447056815279712',   // API 密钥

            // 如需使用敏感接口（如退款、发送红包等）需要配置 API 证书路径(登录商户平台下载 API 证书)
            'cert_path'          =>  '/var/www/mp.jianghairui.com/public/cert/cert.pem', // XXX: 绝对路径！！！！
            'key_path'           =>  '/var/www/mp.jianghairui.com/public/cert/key.pem',      // XXX: 绝对路径！！！！

            // 下面为可选项,指定 API 调用返回结果的类型：array(default)/collection/object/raw/自定义类名
            'response_type' => 'array',
            'log' => [
                'level' => 'debug',
                'file' => APP_PATH . '/wechat.log',
            ],
        ];
        $this->checkSession();
    }

    private function checkSession() {
        $noneed = [
            'Login/login',
            'Pay/notify',
        ];
        if (in_array(request()->controller() . '/' . request()->action(), $noneed)) {
            return true;
        }else {
            if(input('post.token') && mredis()->get(input('post.token'))) {
                $this->myinfo = mredis()->get(input('post.token'));
                return true;
            }else {
                throw new HttpResponseException(ajax('invalid token',3));
            }
        }

    }

    protected function checkPost($postArray) {
        if(empty($postArray)) {
            throw new HttpResponseException(ajax($postArray,-2));
        }
        foreach ($postArray as $value) {
            if (is_null($value) || $value === '') {
                throw new HttpResponseException(ajax($postArray,-2));
            }
        }
        return true;
    }

    protected function xml2array($xml)
    {
        //禁止引用外部xml实体
        libxml_disable_entity_loader(true);
        $values = json_decode(json_encode(simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA)), true);
        return $values;
    }

    //检验地区是否开放
    protected function checkCity($long = '117.04724',$lat = '39.06455') {
        $info = \my\Geocoding::getAddressComponent($long,$lat);
        $city = $info['result']['addressComponent']['city'];
        $exist = Db::table('mp_city')->where(['name'=>$city,'pid'=>0])->find();
        if($exist) {
            return true;
        }else {
            return false;
        }
    }

    protected function getCityinfo($long = '117.04724',$lat = '39.06455') {
        $info = \my\Geocoding::getAddressComponent($long,$lat);
        $city = $info['result']['addressComponent'];
        return $city;
    }

    protected function upload($k) {
        if($this->checkfile($k) !== true) {
            return array('error'=>1,'msg'=>$this->checkfile($k));
        }

        $filename_array = explode('.',$_FILES[$k]['name']);
        $ext = array_pop($filename_array);

        $path =  'static/upload/' . date('Y-m-d');
        is_dir($path) or mkdir($path,0755,true);
        //转移临时文件
        $newname = create_unique_number() . '.' . $ext;
        move_uploaded_file($_FILES[$k]["tmp_name"], $path . "/" . $newname);
        $filepath = $path . "/" . $newname;

        return array('error'=>0,'data'=>$filepath);
    }

    protected function multi_upload() {
        foreach ($_FILES as $k=>$v) {
            if($v['name'] == '') {
                unset($_FILES[$k]);
            }else {
                if($this->checkfile($k) !== true) {
                    return array('error'=>1,'msg'=>$this->checkfile($k));
                }
            }
        }
        $arr = array();
        if(count($arr) > 9) {
            return array('error'=>1,'msg'=>'图片不可超过9张');
        }
        foreach ($_FILES as $k=>$v) {
            $filename_array = explode('.',$_FILES[$k]['name']);
            $ext = array_pop($filename_array);

            $path =  'static/rupload/' . date('Y-m-d');
            is_dir($path) or mkdir($path,0755,true);
            //转移临时文件
            $newname = create_unique_number() . '.' . $ext;
            move_uploaded_file($_FILES[$k]["tmp_name"], $path . "/" . $newname);
            $arr[] = $path . "/" . $newname;
        }
        return array('error'=>0,'data'=>$arr);
    }

    //检验格式大小
    private function checkfile($file) {
        $allowType = array(
            "image/gif",
            "image/jpeg",
            "image/png",
            "image/pjpeg",
            "image/bmp"
        );
        if(!in_array($_FILES[$file]["type"],$allowType)) {
            return 'invalid fileType :' . $_FILES[$file]["name"];
        }
        if($_FILES[$file]["size"] > 1024*300) {
            return 'fileSize not exceeding  300Kb :' . $_FILES[$file]["name"];
        }
        if ($_FILES[$file]["error"] > 0) {
            return "error: " . $_FILES[$file]["error"];
        }else {
            return true;
        }
    }

    protected function checkExist($table,$condition) {
        $exist = Db::table($table)->where($condition)->find();
        if($exist) {
            return true;
        }else {
            return false;
        }
    }


}